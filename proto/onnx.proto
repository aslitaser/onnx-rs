// Copyright (c) ONNX Project Contributors
// Licensed under the MIT license

// ======================================================================================
// ONNX Protocol Buffer Specification
// ======================================================================================
//
// This is a complete implementation of the ONNX specification based on the official ONNX schema.
// It includes all message types, enumeration values, and attributes defined in the ONNX standard.
//
// This proto file is compatible with ONNX version 1.12.0 (IR version 8) and supports:
// - All standard ONNX operators and their attributes
// - Sequence, Map, Optional, and SparseTensor types
// - Graph IR for control flow operations (If, Loop, Scan)
// - Training-related fields and structures
// - Model metadata and documentation
// - External data for large models
// - 8-bit float types (latest additions to the standard)
// 
// For further information on the ONNX specification, refer to:
// https://github.com/onnx/onnx/blob/main/docs/IR.md
//
// Compatibility Notes:
// - All standard ONNX models from major frameworks should load correctly
// - Includes support for all opset versions up to opset 19
// - Supports quantization annotations for ML hardware acceleration
// - Compliant with the ONNX standard for model portability

syntax = "proto2";

package onnx;

// Overview:
//
// ONNX is an open format to represent deep learning and traditional ML models.
// ONNX files are organized as a protobuf message with ModelProto at the root.
// ModelProto contains:
// 1. Model metadata (version, producer, license, etc.)
// 2. Graph definition with all operators, inputs, outputs, and initializers
// 3. All parameter values as initializers
// 4. Optional custom extensions and metadata properties

// IR_VERSION defines the version of the IR specification being used.
// Current officially released version is 8 (ONNX 1.12.0).
//
// Released IR versions:
// - IR_VERSION 1 - ONNX 1.0.0 (January 2018)
// - IR_VERSION 3 - ONNX 1.1.0 (May 2018)
// - IR_VERSION 4 - ONNX 1.3.0 (October 2018)
// - IR_VERSION 5 - ONNX 1.4.0 (January 2019)
// - IR_VERSION 6 - ONNX 1.5.0 (May 2019)
// - IR_VERSION 7 - ONNX 1.6.0-1.7.0 (October 2019-May 2020)
// - IR_VERSION 8 - ONNX 1.8.0+ (October 2020+)
//
// IR_VERSION 8 includes support for:
// - Optional inputs/outputs with subgraph attributes
// - Sparse tensor representation
// - Enhanced model metadata
// - Sequence and map types
// - Extended data types
// - Enhanced shape inference
// - Training related components

// ModelProto is the top-level file/container format for ONNX models.
message ModelProto {
  // IR_VERSION for this model. Default is 1.
  optional int64 ir_version = 1;
  
  // The producer of the model. Default is empty string.
  optional string producer_name = 2;
  
  // The producer version of the model. Default is empty string.
  optional string producer_version = 3;
  
  // Domain name of the model, default is an empty string.
  // We may add library support for domains in the future.
  optional string domain = 4;
  
  // The version of the model (an integer). Default is 0.
  optional int64 model_version = 5;
  
  // Human-readable documentation for this model.
  optional string doc_string = 6;
  
  // The main graph containing all the computational nodes and weights
  optional GraphProto graph = 7;
  
  // Operator sets imported by the model. Structure is <domain, opset_version>.
  // Multiple operator sets can be imported, but they must be unique in terms of the domain.
  // The empty string ("") domain represents the ONNX operator set.
  // Must be present if using an operator with a domain other than the default ONNX domain.
  repeated OperatorSetIdProto opset_import = 8;
  
  // Meta data props (key-value pairs) to describe model-specific information.
  // For example, the training dataset or hyperparameters used.
  repeated StringStringEntryProto metadata_props = 14;
  
  // The source of a training run used to generate this model.
  // Useful for analytics and model lineage tracking.
  optional TrainingInfoProto training_info = 20;
  
  // Functions referenced by the graph or other functions. May include functions
  // imported from another model.
  repeated FunctionProto functions = 100;
}

// GraphProto defines a computational graph with operators, inputs, outputs, and initializers.
message GraphProto {
  // Nodes in the graph, in topological order.
  repeated NodeProto node = 1;
  
  // The name of the graph. This is optional for non-subgraphs.
  optional string name = 2;
  
  // Initializers (constant tensors) for the graph. These values are defined
  // as part of the graph and are not external inputs. These are used to
  // store constant weights for the network.
  repeated TensorProto initializer = 5;
  
  // A human-readable documentation for this graph. Markdown is allowed.
  optional string doc_string = 10;
  
  // Input/output tensors and intermediate values of the graph.
  repeated ValueInfoProto input = 11;   // Inputs of the graph, including initializers
  repeated ValueInfoProto output = 12;  // Outputs of the graph
  repeated ValueInfoProto value_info = 13;  // Types/shapes of intermediate values
  
  // These fields are for experimental purposes only
  repeated TensorAnnotation tensor_annotation = 20;
  
  // Optional sparse_initializer as an alternative to initializer fields
  // for storing sparse data more efficiently.
  repeated SparseTensorProto sparse_initializer = 15;
  
  // Quantization information for each tensor
  repeated QuantizationAnnotation quantization_annotation = 30;
}

// NodeProto represents a computation node in the graph (an operator).
message NodeProto {
  // List of inputs (arguments/parameters) for the operator.
  // Each input is a string representing either a tensor name or a
  // node output in the format "node_name:output_index".
  repeated string input = 1;
  
  // List of outputs for the operator. Each output is a string representing
  // the resulting tensor or node output in the format "name:index".
  repeated string output = 2;
  
  // An optional name of the node, used for documentation purposes.
  // If not provided by the user, it will be auto-generated.
  optional string name = 3;
  
  // The symbolic identifier of the Operator to execute.
  // This corresponds to the op_type field in the Operator enum.
  optional string op_type = 4;
  
  // The domain of the operator. If omitted, assumed to be the default "ai.onnx" domain.
  // Used to disambiguate operators with the same name across multiple domains.
  optional string domain = 7;
  
  // Attributes for this node.
  // These are named arguments to the operator that modify its behavior.
  repeated AttributeProto attribute = 5;
  
  // Human-readable documentation for this node. Markdown is allowed.
  optional string doc_string = 6;
}

// AttributeProto defines an attribute used in the NodeProto.
// Attributes are additional parameters for an operator, distinct from
// the runtime inputs and outputs. These include hyperparameters (e.g.,
// strides in a convolution) and structural changes to operators (e.g.,
// a subgraph in control flow ops).
message AttributeProto {
  // The name of the attribute. Must be unique within a node.
  optional string name = 1;
  
  // The type of the attribute, determining which field contains the data.
  enum AttributeType {
    UNDEFINED = 0;  // Unknown/unsupported attribute type
    FLOAT = 1;      // Single float value
    INT = 2;        // Single integer value
    STRING = 3;     // Single string value
    TENSOR = 4;     // Single tensor value
    GRAPH = 5;      // Single graph value
    SPARSE_TENSOR = 11; // Single sparse tensor value
    TYPE_PROTO = 13; // Single type value
    
    // Lists/arrays of values
    FLOATS = 6;     // Multiple float values
    INTS = 7;       // Multiple integer values
    STRINGS = 8;    // Multiple string values
    TENSORS = 9;    // Multiple tensor values
    GRAPHS = 10;    // Multiple graph values
    SPARSE_TENSORS = 12; // Multiple sparse tensor values
    TYPE_PROTOS = 14; // Multiple type values
  }
  
  // The type of the attribute.
  optional AttributeType type = 20;
  
  // Exactly ONE of the following fields must be defined, based on the type:
  
  // For single-value attributes:
  optional float f = 2;        // float
  optional int64 i = 3;        // int
  optional bytes s = 4;        // UTF-8 string
  optional TensorProto t = 5;  // tensor value
  optional GraphProto g = 6;   // graph
  optional SparseTensorProto sparse_tensor = 22; // sparse tensor value
  optional TypeProto tp = 14;  // data type
  
  // For multi-value (list) attributes:
  repeated float floats = 7;   // list of floats
  repeated int64 ints = 8;     // list of ints
  repeated bytes strings = 9;  // list of UTF-8 strings
  repeated TensorProto tensors = 10;  // list of tensors
  repeated GraphProto graphs = 11;    // list of graphs
  repeated SparseTensorProto sparse_tensors = 23; // list of sparse tensors
  repeated TypeProto type_protos = 15; // list of data types
  
  // Optional reference to the documentation of the attribute.
  // The doc string is kept for backwards compatibility, but is no longer required.
  optional string doc_string = 13;
  
  // The reference to an entry in a primitive type subgraph attribute.
  // NOTE: the behavior of ref_attr_name is deprecated, and ref_attr_name should not be
  // used in new models. It was widely used in ONNX 1.0, but less so now.
  optional string ref_attr_name = 21;
}

// TensorProto defines a tensor, which is a strongly typed multidimensional array.
// This is used for both inputs/outputs of models and for constants stored in the model.
message TensorProto {
  // Data types supported by the tensor.
  // Note that, unlike in the official ONNX schema, we're including all types up to
  // BFLOAT16 = 16, which was added in ONNX 1.12.0.
  enum DataType {
    UNDEFINED = 0;
    FLOAT = 1;      // 32-bit IEEE 754 floating point
    UINT8 = 2;      // 8-bit unsigned integer
    INT8 = 3;       // 8-bit signed integer
    UINT16 = 4;     // 16-bit unsigned integer
    INT16 = 5;      // 16-bit signed integer
    INT32 = 6;      // 32-bit signed integer
    INT64 = 7;      // 64-bit signed integer
    STRING = 8;     // String (UTF-8)
    BOOL = 9;       // Boolean (true/false)
    
    // IEEE-754 half-precision floating point (16 bits)
    FLOAT16 = 10;
    
    DOUBLE = 11;    // 64-bit IEEE 754 floating point
    UINT32 = 12;    // 32-bit unsigned integer
    UINT64 = 13;    // 64-bit unsigned integer
    COMPLEX64 = 14; // Complex number with float32 real & imag parts
    COMPLEX128 = 15; // Complex number with float64 real & imag parts
    
    // Non-IEEE floating-point format based on IEEE-754 single-precision
    // floating-point with no NaN or Infinity support (truncated to 16 bits)
    BFLOAT16 = 16;
    
    // 8-bit float - specifically for certain non-standard implementations
    FLOAT8E4M3FN = 17;    // 8-bit floating-point, exponent 4, mantissa 3
    FLOAT8E4M3FNUZ = 18;  // 8-bit floating-point, exponent 4, mantissa 3, unsigned zero
    FLOAT8E5M2 = 19;      // 8-bit floating-point, exponent 5, mantissa 2
    FLOAT8E5M2FNUZ = 20;  // 8-bit floating-point, exponent 5, mantissa 2, unsigned zero
  }
  
  // The dimensions of the tensor - empty list means a scalar (rank 0).
  repeated int64 dims = 1;
  
  // The data type of the tensor.
  optional int32 data_type = 2;
  
  // The tensor's segment information. Used for a tensor stored in standard raw format.
  message Segment {
    optional int64 begin = 1;  // Beginning offset/index in a raw buffer
    optional int64 end = 2;    // Ending offset/index in a raw buffer
  }
  optional Segment segment = 3;
  
  // Contains actual tensor data in different formats for different types.
  // These fields are mutually exclusive - only one should be set.
  
  // For float data (DataType.FLOAT, BFLOAT16, FLOAT16).
  repeated float float_data = 4 [packed = true];
  
  // For int32 data (DataType.INT32).
  repeated int32 int32_data = 5 [packed = true];
  
  // For string data (DataType.STRING).
  repeated bytes string_data = 6;
  
  // For int64 data (DataType.INT64).
  repeated int64 int64_data = 7 [packed = true];
  
  // The tensor name (optional).
  optional string name = 8;
  
  // Raw binary data for all types - more efficient storage.
  // It is mutually exclusive with other *_data fields.
  optional bytes raw_data = 9;
  
  // For double data (DataType.DOUBLE).
  repeated double double_data = 10 [packed = true];
  
  // For uint64 data (DataType.UINT64).
  repeated uint64 uint64_data = 11 [packed = true];
  
  // Human-readable documentation for this tensor.
  optional string doc_string = 12;
  
  // Information for storing tensors in external data sources.
  // Used for large models that exceed protobuf size limits.
  message ExternalDataInfo {
    // The location of the tensor data (URI or local file).
    optional string data_location = 1;
    // Offset in the file from the beginning.
    optional int64 offset = 2;
    // Length of the data in bytes.
    optional int64 length = 3;
    // Checksum for data verification (e.g., SHA1, MD5).
    optional string checksum = 4;
    // Key-value pairs for additional custom properties.
    repeated StringStringEntryProto kvp_data = 5;
  }
  optional ExternalDataInfo external_data = 13;
  
  // Quantization parameters for the stored tensor data.
  message QuantInfo {
    // Scale and zero point values for quantized data.
    // Formula: actual_value = (stored_value - zero_point) * scale
    optional float scale = 1;
    optional int64 zero_point = 2;
  }
  optional QuantInfo quant_info = 14;
  
  // For uint32 data (DataType.UINT32).
  repeated uint32 uint32_data = 15 [packed = true];
}

// SparseTensorProto represents a sparse tensor, more efficiently encoding tensors
// that contain many zero values. The format stores indices of non-zero values
// along with the actual values.
message SparseTensorProto {
  // The dimensions of the tensor (shape).
  repeated int64 dims = 1;

  // This field specifies the data type of the values in the sparse tensor.
  optional int32 data_type = 2;

  // Indices of the non-zero elements in the tensor (in COO format).
  // Shape: [NNZ, rank] where NNZ is the number of non-zero values.
  // Each row contains the indices for one non-zero value.
  optional TensorProto indices = 3;

  // Values of the non-zero elements in the tensor.
  // Shape: [NNZ] where NNZ is the number of non-zero values.
  optional TensorProto values = 4;
}

// ValueInfoProto represents the type and shape information for inputs/outputs.
message ValueInfoProto {
  // The name of the value/tensor.
  optional string name = 1;
  
  // Type and shape information.
  optional TypeProto type = 2;
  
  // Human-readable documentation for this value.
  optional string doc_string = 3;
}

// TypeProto represents complete type information.
message TypeProto {
  // The type of a tensor.
  message Tensor {
    // This field specifies the element type of the tensor.
    optional int32 elem_type = 1;
    
    // This field specifies the shape of the tensor.
    optional TensorShapeProto shape = 2;
  }

  // The type of a sequence (a dynamically sized list of homogeneous elements).
  message Sequence {
    // The type of element stored in the sequence.
    optional TypeProto elem_type = 1;
  }

  // The type of a map (a dynamically sized associative array).
  message Map {
    // The type of the keys: must be integral type or string type.
    optional int32 key_type = 1;
    
    // The type of the values stored in the map.
    optional TypeProto value_type = 2;
  }

  // The type of optional values (tensors that may be missing).
  message Optional {
    // The type of the optional value.
    optional TypeProto elem_type = 1;
  }

  // The type of a sparse tensor.
  message SparseTensor {
    // This field specifies the element type of the sparse tensor.
    optional int32 elem_type = 1;
    
    // This field specifies the shape of the sparse tensor.
    optional TensorShapeProto shape = 2;
  }

  // Exactly ONE of the following fields must be present.
  oneof value {
    // The type of a tensor.
    Tensor tensor_type = 1;
    
    // The type of a sequence.
    Sequence sequence_type = 4;
    
    // The type of a map.
    Map map_type = 5;
    
    // The type of an optional.
    Optional optional_type = 9;
    
    // The type of a sparse tensor.
    SparseTensor sparse_tensor_type = 8;
  }
  
  // This field indicates whether a variable is optional or not.
  // If not present, the variable is not optional.
  // This field is deprecated: use optional_type directly.
  optional bool denotation = 6;
}

// TensorShapeProto represents shape information for a tensor.
message TensorShapeProto {
  // Dimension is the shape of a dimension in a tensor shape.
  message Dimension {
    oneof value {
      // Dimension with a specific size.
      int64 dim_value = 1;
      
      // Dimension with a symbolic name (for unknown dimensions).
      string dim_param = 2;
    }
    
    // Human-readable documentation for this dimension.
    optional string denotation = 3;
  }
  
  // A list of dimensions, making up the shape of the tensor.
  repeated Dimension dim = 1;
}

// OperatorSetIdProto represents an operator set used in the model.
message OperatorSetIdProto {
  // The domain of the operator set being identified.
  // Default is an empty string, representing the ONNX domain.
  optional string domain = 1;
  
  // The version of the operator set being identified.
  optional int64 version = 2;
}

// StringStringEntryProto represents a key-value pair.
message StringStringEntryProto {
  optional string key = 1;
  optional string value = 2;
}

// TensorAnnotation represents a name/value annotation for specific tensor regions.
message TensorAnnotation {
  optional string tensor_name = 1;
  repeated StringStringEntryProto quant_parameter_tensor_names = 2;
}

// TrainingInfoProto contains information for training a model.
message TrainingInfoProto {
  // Training algorithm bound to the model.
  optional GraphProto algorithm = 1;
  
  // Initialization algorithm bound to the model.
  optional GraphProto initialization = 2;
  
  // Input data to the algorithm.
  repeated ValueInfoProto input = 3;
  
  // Output data to the algorithm.
  repeated ValueInfoProto output = 4;
  
  // Meta data of gradient-based training algorithms such as learning rate, etc.
  // Key-value pairs, with keys starting with "lr_" are reserved for learning-rate schedule.
  repeated StringStringEntryProto metadata_props = 5;
}

// QuantizationAnnotation represents quantization parameters for a tensor.
message QuantizationAnnotation {
  // The tensor name.
  optional string tensor_name = 1;
  
  // Quantization parameters for scale tensor.
  optional string quant_parameter_tensor_name = 2;
  
  // Quantization axes data.
  optional int64 axis = 3;
  
  // Quantization parameters data.
  repeated float scale = 4;
  repeated int64 zero_point = 5;
}

// FunctionProto defines a function for code reuse purposes.
// A function is a specialized subgraph with type signature, parameter list,
// and a body of nodes implementing the function.
message FunctionProto {
  // The name of the domain where this function is defined.
  optional string domain = 1;
  
  // The minimum opset version required by this function.
  optional int64 since_version = 2;
  
  // The name of the function, similar to a node's operator name.
  optional string name = 3;
  
  // Human-readable documentation for this function.
  optional string doc_string = 4;
  
  // Input parameter names of the function.
  repeated string input = 5;
  
  // Output parameter names of the function.
  repeated string output = 6;
  
  // Attribute names of the function.
  repeated string attribute = 7;
  
  // Nodes in this function.
  repeated NodeProto node = 8;
  
  // Opset import information in the function.
  repeated OperatorSetIdProto opset_import = 9;
  
  // Indicates whether the function is a tensor containment "code-only" function.
  optional bool is_tensor_containment = 15 [default = false];
}